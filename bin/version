#!/usr/bin/env bash

# Created by argbash-init v2.8.0
# ARG_OPTIONAL_BOOLEAN([major])
# ARG_OPTIONAL_BOOLEAN([minor])
# ARG_OPTIONAL_BOOLEAN([patch])
# ARG_OPTIONAL_BOOLEAN([rc])
# ARG_POSITIONAL_SINGLE([version])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_version=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_major="off"
_arg_minor="off"
_arg_patch="off"
_arg_rc="off"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [--(no-)major] [--(no-)minor] [--(no-)patch] [--(no-)rc] [-h|--help] <version>\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-major|--major)
				_arg_major="on"
				test "${1:0:5}" = "--no-" && _arg_major="off"
				;;
			--no-minor|--minor)
				_arg_minor="on"
				test "${1:0:5}" = "--no-" && _arg_minor="off"
				;;
			--no-patch|--patch)
				_arg_patch="on"
				test "${1:0:5}" = "--no-" && _arg_patch="off"
				;;
			--no-rc|--rc)
				_arg_rc="on"
				test "${1:0:5}" = "--no-" && _arg_rc="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'version'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_version "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


function main() {
  local prefix=''
  local version="${_arg_version/v/}"
  local default_size=patch

  if [[ "$version" != "$_arg_version" ]]; then
    prefix=v
  fi

  local patch_enabled=true
  function _format_version() {
    local major="$1"
    local minor="$2"
    local patch="$3"
    local id="$4"
    local id_count="$5"

    echo -n $prefix

    echo -n $major.$minor
    if [[ $patch_enabled == true ]]; then
      echo -n .$patch
    fi

    if [[ -n "$id" ]]; then
      echo "-$id.$id_count"
    else
      echo ''
    fi
  }

  local current_major=$( echo $version | cut -d. -f1 )
  local current_minor=$( echo $version | cut -d. -f2 )
  local current_patch=$( echo $version | cut -d. -f3 )
  local identifier=''
  local current_id=''

  if [[ "$( echo $version | cut -d- -f2 )" != "$version" ]]; then
    identifier=$( echo $version | cut -d- -f2 | cut -d. -f1 )
    current_id=$( echo $version | cut -d- -f2 | cut -d. -f2 )
  fi

  if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+(.*)$ ]]; then
    :
  else
    patch_enabled=false
    default_size=minor
  fi

  for s in major minor patch rc; do
    var=_arg_$s
    if [[ ${!var} != off ]]; then
      size=$s
    fi
  done

  for s in rc; do
    var=_arg_$s
    if [[ ${!var} != off && -z "$identifier" ]]; then
      identifier=$s

      # The next version if adding an rc flag should be the next lowest version
      if [[ $patch_enabled == true ]]; then
        current_patch=$((current_patch+1))
      else
        current_minor=$((current_minor+1))
      fi
    fi
  done

  # If the identifier is set to rc and we have not explicitly specified a bump,
  #  then we can assume that we only need to strip the rc flag.  I.e. it is no
  #  longer a release candidate, but a release itself.
  if [[ -z "$size" && "$identifier" == rc ]]; then
    if [[ $patch_enabled == true ]]; then
      current_patch=$((current_patch-1))
    else
      current_minor=$((current_minor-1))
    fi
  fi

  case ${size:-$default_size} in
    patch )
      _format_version $((current_major)) $((current_minor)) $((current_patch+1))
      ;;
    minor )
      _format_version $((current_major)) $((current_minor+1)) 0
      ;;
    major )
      _format_version $((current_major+1)) 0 0
      ;;
    rc )
      _format_version $((current_major)) $((current_minor)) $((current_patch)) ${identifier} $((current_id+1))
      ;;
  esac
}

main "${@:-}"
exit $?

# ] <-- needed because of Argbash
